const FavoriteModel = require('../models/Favorite');
const MusicModel = require('../models/Music');

class FavoriteController {
    // [GET] /favorite/:userId
    async getFavoritesByUser(req, res) {
        try {
            const { userId } = req.params;

            const favoriteDoc = await FavoriteModel.findOne({ userId }).populate('songIds');

            if (!favoriteDoc) {
                return res.status(200).json({ songs: [] }); // Tr·∫£ m·∫£ng r·ªóng n·∫øu ch∆∞a c√≥ danh s√°ch
            }

            return res.status(200).json({ songs: favoriteDoc.songIds });
        } catch (error) {
            return res.status(500).json({ message: error.message });
        }
    }

    // [GET] /favorite/full-song/:userId
    async getFullFavoriteSongs(req, res) {
        try {
            const { userId } = req.params;

            // T√¨m b·∫£n ghi y√™u th√≠ch c·ªßa user
            const favoriteDoc = await FavoriteModel.findOne({ userId });

            if (!favoriteDoc || !favoriteDoc.songIds.length) {
                return res.status(200).json({ songs: [] });
            }

            // L·∫•y ƒë·∫ßy ƒë·ªß th√¥ng tin b√†i h√°t t·ª´ MusicModel
            const songs = await MusicModel.find({ _id: { $in: favoriteDoc.songIds } });

            return res.status(200).json({ songs });
        } catch (error) {
            console.error('L·ªói khi l·∫•y danh s√°ch b√†i h√°t y√™u th√≠ch ƒë·∫ßy ƒë·ªß:', error);
            return res.status(500).json({ message: error.message });
        }
    }

    // [POST] /favorite/add
    async addToFavorite(req, res) {
        try {
            const { userId, songId } = req.body;

            // T√¨m b·∫£n ghi y√™u th√≠ch c·ªßa user
            let favoriteDoc = await FavoriteModel.findOne({ userId });

            if (!favoriteDoc) {
                // N·∫øu ch∆∞a c√≥ th√¨ t·∫°o m·ªõi
                favoriteDoc = await FavoriteModel.create({
                    userId,
                    songIds: [songId],
                });
            } else {
                // N·∫øu ƒë√£ t·ªìn t·∫°i, ki·ªÉm tra tr√πng
                if (favoriteDoc.songIds.includes(songId)) {
                    return res.status(400).json({ message: 'B·∫°n ƒë√£ y√™u th√≠ch b√†i h√°t n√†y r·ªìi.' });
                }

                // Th√™m songId v√†o m·∫£ng
                favoriteDoc.songIds.push(songId);
                await favoriteDoc.save();
            }

            // TƒÉng l∆∞·ª£t y√™u th√≠ch b√†i h√°t
            await MusicModel.findByIdAndUpdate(songId, { $inc: { favoriteCount: 1 } });

            return res.status(201).json({ message: 'ƒê√£ th√™m v√†o y√™u th√≠ch.' });
        } catch (error) {
            return res.status(500).json({ message: error.message });
        }
    }

    // [DELETE] /favorite/remove
    async removeFromFavorite(req, res) {
        try {
            const { userId, songId } = req.body;
            console.log('üöÄ ~ FavoriteController ~ removeFromFavorite ~ userId:', userId);

            // T√¨m b·∫£n ghi y√™u th√≠ch c·ªßa user
            const favoriteDoc = await FavoriteModel.findOne({ userId });

            if (!favoriteDoc) {
                return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y danh s√°ch y√™u th√≠ch.' });
            }

            // Ki·ªÉm tra xem songId c√≥ trong danh s√°ch kh√¥ng
            const index = favoriteDoc.songIds.indexOf(songId);
            if (index === -1) {
                return res.status(400).json({ message: 'B√†i h√°t kh√¥ng t·ªìn t·∫°i trong danh s√°ch y√™u th√≠ch.' });
            }

            // G·ª° b√†i h√°t kh·ªèi m·∫£ng
            favoriteDoc.songIds.splice(index, 1);
            await favoriteDoc.save();

            // Gi·∫£m l∆∞·ª£t y√™u th√≠ch b√†i h√°t
            await MusicModel.findByIdAndUpdate(songId, { $inc: { favoriteCount: -1 } });

            return res.status(200).json({ message: 'ƒê√£ xo√° kh·ªèi y√™u th√≠ch.' });
        } catch (error) {
            return res.status(500).json({ message: error.message });
        }
    }
}

module.exports = new FavoriteController();
